// Mocks generated by Mockito 5.4.5 from annotations
// in kente_codeweaver/test/widget/components/block_workspace_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i3;
import 'dart:ui' as _i6;

import 'package:kente_codeweaver/services/device_profile_service.dart' as _i4;
import 'package:kente_codeweaver/services/pattern_render_service.dart' as _i2;
import 'package:kente_codeweaver/services/storage_service.dart' as _i5;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

/// A class which mocks [PatternRenderService].
///
/// See the documentation for Mockito's code generation for more information.
class MockPatternRenderService extends _i1.Mock
    implements _i2.PatternRenderService {
  MockPatternRenderService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  bool get hasListeners => (super.noSuchMethod(
        Invocation.getter(#hasListeners),
        returnValue: false,
      ) as bool);

  @override
  _i3.Future<void> initialize({
    required _i4.DeviceProfileService? deviceProfileService,
    required _i5.StorageService? storageService,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #initialize,
          [],
          {
            #deviceProfileService: deviceProfileService,
            #storageService: storageService,
          },
        ),
        returnValue: _i3.Future<void>.value(),
        returnValueForMissingStub: _i3.Future<void>.value(),
      ) as _i3.Future<void>);

  @override
  _i3.Future<Map<String, dynamic>> renderPattern({
    required String? patternId,
    required List<Map<String, dynamic>>? blocks,
    required _i6.Size? previewSize,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #renderPattern,
          [],
          {
            #patternId: patternId,
            #blocks: blocks,
            #previewSize: previewSize,
          },
        ),
        returnValue:
            _i3.Future<Map<String, dynamic>>.value(<String, dynamic>{}),
      ) as _i3.Future<Map<String, dynamic>>);

  @override
  Map<String, String>? getPatternInfo(String? patternId) =>
      (super.noSuchMethod(Invocation.method(
        #getPatternInfo,
        [patternId],
      )) as Map<String, String>?);

  @override
  List<String> getAvailablePatterns() => (super.noSuchMethod(
        Invocation.method(
          #getAvailablePatterns,
          [],
        ),
        returnValue: <String>[],
      ) as List<String>);

  @override
  String? getConceptForPattern(String? patternId) =>
      (super.noSuchMethod(Invocation.method(
        #getConceptForPattern,
        [patternId],
      )) as String?);

  @override
  void clearCache() => super.noSuchMethod(
        Invocation.method(
          #clearCache,
          [],
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i3.Future<void> savePattern(
    String? patternId,
    Map<String, dynamic>? pattern,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #savePattern,
          [
            patternId,
            pattern,
          ],
        ),
        returnValue: _i3.Future<void>.value(),
        returnValueForMissingStub: _i3.Future<void>.value(),
      ) as _i3.Future<void>);

  @override
  _i3.Future<void> deletePattern(String? patternId) => (super.noSuchMethod(
        Invocation.method(
          #deletePattern,
          [patternId],
        ),
        returnValue: _i3.Future<void>.value(),
        returnValueForMissingStub: _i3.Future<void>.value(),
      ) as _i3.Future<void>);

  @override
  List<String> getUnlockedPatterns() => (super.noSuchMethod(
        Invocation.method(
          #getUnlockedPatterns,
          [],
        ),
        returnValue: <String>[],
      ) as List<String>);

  @override
  bool isPatternUnlocked(String? patternId) => (super.noSuchMethod(
        Invocation.method(
          #isPatternUnlocked,
          [patternId],
        ),
        returnValue: false,
      ) as bool);

  @override
  _i3.Future<Map<String, dynamic>?> getPattern(String? patternId) =>
      (super.noSuchMethod(
        Invocation.method(
          #getPattern,
          [patternId],
        ),
        returnValue: _i3.Future<Map<String, dynamic>?>.value(),
      ) as _i3.Future<Map<String, dynamic>?>);

  @override
  void addListener(_i6.VoidCallback? listener) => super.noSuchMethod(
        Invocation.method(
          #addListener,
          [listener],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void removeListener(_i6.VoidCallback? listener) => super.noSuchMethod(
        Invocation.method(
          #removeListener,
          [listener],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void dispose() => super.noSuchMethod(
        Invocation.method(
          #dispose,
          [],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void notifyListeners() => super.noSuchMethod(
        Invocation.method(
          #notifyListeners,
          [],
        ),
        returnValueForMissingStub: null,
      );
}
